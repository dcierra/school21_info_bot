from aiogram import Router, F
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.types import Message
from Bot.states.registration_states import RegistrationState
from db_utils.commands import registration, get_user

router = Router()


@router.message(Command('registration'))
async def cmd_registration(message: Message, state: FSMContext):
    await state.clear()

    user = get_user.get_user(message.from_user.id)

    if not user:
        await message.answer('–í–≤–µ–¥–∏—Ç–µ <b>–ª–æ–≥–∏–Ω</b>: üìù', parse_mode='HTML')
        await state.set_state(RegistrationState.enter_login.state)
    else:
        await message.answer('–í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã ‚úÖ', parse_mode='HTML')


@router.message(RegistrationState.enter_login)
async def process_login(message: Message, state: FSMContext):
    await state.update_data(login=message.text)

    await message.answer('–í–≤–µ–¥–∏—Ç–µ <b>–ø–∞—Ä–æ–ª—å</b>: üîí', parse_mode='HTML')
    await state.set_state(RegistrationState.enter_password.state)


@router.message(RegistrationState.enter_password)
async def process_password(message: Message, state: FSMContext):
    await state.update_data(password=message.text)
    user_data = await state.get_data()

    await message.answer('<i>–ü—ã—Ç–∞—é—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –®–∫–æ–ª–µ 21..</i>', parse_mode='HTML')

    if await registration.registration(user_data, message):
        await message.answer('<b>–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!</b> ‚úÖ', parse_mode='HTML')
    else:
        await message.answer(
            '<b>–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –®–∫–æ–ª–µ 21 —Å –≤–≤–µ–¥–µ–Ω–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑!</b> ‚ùå',
            parse_mode='HTML'
        )

    await state.clear()

