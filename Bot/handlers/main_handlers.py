import asyncio

from aiogram import Router, F
from aiogram.filters import Command
from aiogram.types import Message
from db_utils.commands.get_user import get_user
from db_utils.commands.set_token import set_token
from SchoolParser.SchoolRequests import Request

router = Router()


def create_request(user):
    req = Request(
        cookies={'tokenId': user.token_id},
        headers={'schoolid': user.school_id}
    )

    if req.test_request() == 200:
        return req
    else:
        set_token(user)
        return create_request(user)


@router.message(Command('get_events'))
async def cmd_get_events(message: Message):
    user = get_user(message.from_user.id)

    if user:
        req = create_request(user)
        events = req.get_events(print_result=False)

        events_text = "<b>–°–æ–±—ã—Ç–∏—è:</b>\n\n"
        for event_id, event_info in events.items():
            events_text += f"üìÖ <b>{event_id}</b>\n"
            events_text += f"üë§ <i>–ò–º—è:</i> {event_info['–ò–º—è']}\n"
            events_text += f"üìù <i>–û–ø–∏—Å–∞–Ω–∏–µ:</i> {event_info['–û–ø–∏—Å–∞–Ω–∏–µ']}\n"
            events_text += f"‚è∞ <i>–ù–∞—á–∞–ª–æ —á–µ—Ä–µ–∑:</i> {event_info['–ù–∞—á–∞–ª–æ —á–µ—Ä–µ–∑']}\n\n"

        await message.answer(events_text, parse_mode='HTML')
    else:
        await message.answer('<b>–í–∞–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è '
                             '–¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã!</b> ‚ùå', parse_mode='HTML')


@router.message(Command('get_campus_occupied'))
async def cmd_get_campus_occupied(message: Message):
    user = get_user(message.from_user.id)

    if user:
        req = create_request(user)
        campus_map = req.get_campus_plan_occupied(print_result=False)

        campus_text = "üè¢ <b>–ó–∞–Ω—è—Ç–æ—Å—Ç—å –∫–∞–º–ø—É—Å–æ–≤:</b>\n\n"
        for campus_id, campus_info in campus_map.items():
            campus_text += f"<b>{campus_id}</b>\n"
            campus_text += f"üîí <i>–ó–∞–Ω—è—Ç–æ –º–µ—Å—Ç:</i> <b>{campus_info['–ó–∞–Ω—è—Ç–æ –º–µ—Å—Ç']}</b>\n"
            campus_text += f"üîì <i>–í—Å–µ–≥–æ –º–µ—Å—Ç:</i> <b>{campus_info['–í—Å–µ–≥–æ –º–µ—Å—Ç']}</b>\n"
            campus_text += f"üíØ <i>–ó–∞–Ω—è—Ç–æ –≤ %:</i> <b>{campus_info['–ó–∞–Ω—è—Ç–æ –≤ %']}</b>\n\n"

        await message.answer(campus_text, parse_mode='HTML')
    else:
        await message.answer('<b>–í–∞–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è '
                             '–¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã!</b> ‚ùå', parse_mode='HTML')


@router.message(Command('profile'))
async def cmd_profile(message: Message):
    user = get_user(message.from_user.id)

    if user:
        req = create_request(user)
        profile = req.get_user_info(print_result=False)

        profile_text = "üë§ <b>–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å:</b>\n\n"
        for name, value in profile.items():
            if name == '–î–µ–¥–ª–∞–π–Ω':
                goals = value.split('\n')
                profile_text += f"<b>{name}:</b>\n"
                for goal in goals:
                    if goal.strip():
                        profile_text += f"    üéØ <i>{goal.strip()}</i>\n"
            else:
                emoji = {
                    "–õ–æ–≥–∏–Ω": "üîê",
                    "–ò–º—è –Ω–∞ –ø–æ—Ä—Ç–∞–ª–µ": "üë§",
                    "–§–∞–º–∏–ª–∏—è –Ω–∞ –ø–æ—Ä—Ç–∞–ª–µ": "üë•",
                    "–£—Ä–æ–≤–µ–Ω—å": "üìä",
                    "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ peer –ø–æ–∏–Ω—Ç–æ–≤": "ü§ù",
                    "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ code review –ø–æ–∏–Ω—Ç–æ–≤": "üîç",
                    "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ coins": "üí∞",
                    "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–µ–Ω–∞–ª—å—Ç–∏": "‚öñÔ∏è",
                }
                profile_text += f"{emoji.get(name, 'üìù')} <b>{name}:</b> {value}\n"

        await message.answer(profile_text, parse_mode='HTML')
    else:
        await message.answer('<b>–í–∞–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è –¥–ª—è '
                             '–≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã!</b> ‚ùå', parse_mode='HTML')


async def notify_task(message: Message, req: Request):
    while True:
        await asyncio.sleep(300)
        result = req.get_events(print_result=False, only_notify=True)
        if result:
            answer_text = "üîî <b>–ü—Ä–æ–≤–µ—Ä–∫–∞:</b>\n\n"
            answer_text += f"üìù –û–ø–∏—Å–∞–Ω–∏–µ: {result['–û–ø–∏—Å–∞–Ω–∏–µ']}\n"
            answer_text += f"‚è∞ –ù–∞—á–∞–ª–æ —á–µ—Ä–µ–∑: {result['–ù–∞—á–∞–ª–æ —á–µ—Ä–µ–∑']}\n\n"

            await message.answer(answer_text, parse_mode='HTML')


@router.message(Command('start_notify'))
async def cmd_start_notify(message: Message):
    user = get_user(message.from_user.id)

    if user:
        if not hasattr(router, 'notify_task'):
            req = create_request(user)
            router.notify_task = asyncio.create_task(notify_task(message, req))
            await message.answer("‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤–∫–ª—é—á–µ–Ω—ã.")
        else:
            await message.answer("üö´ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —É–∂–µ –≤–∫–ª—é—á–µ–Ω—ã.")
    else:
        await message.answer('<b>–í–∞–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è –¥–ª—è'
                             ' –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã!</b> ‚ùå', parse_mode='HTML')


@router.message(Command('stop_notify'))
async def cmd_stop_notify(message: Message):
    user = get_user(message.from_user.id)

    if user:
        if hasattr(router, 'notify_task'):
            router.notify_task.cancel()
            del router.notify_task
            await message.answer("‚õîÔ∏è –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã.")
        else:
            await message.answer("üö´ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –Ω–µ –≤–∫–ª—é—á–µ–Ω—ã.")
    else:
        await message.answer('<b>–í–∞–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è '
                             '–¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã!</b> ‚ùå', parse_mode='HTML')
